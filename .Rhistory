getwd()
setwd("C:/Users/vikto/OneDrive/Dokument/skola/3/robusta metoder/ms1415")
adf.test(res_ar)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(gridExtra)
library(forecast)
library(tseries)
data <- read.delim("CACONDE.txt", header = FALSE, sep="\n")
train <- window(ts_data, end = c(2023, 8))
pacf(data$value, main = "Partial Autocorrelation") # suggests AR(1) or AR(2) will be good
ts_data <- ts(data$value, start = c(2015,1), frequency = 12)
colnames(data) <- c("value")
start_date <- as.Date("2015-01-01")
data$date <- seq.Date(from = start_date, by = "month", length.out = nrow(data))
ts_data <- ts(data$value, start = c(2015,1), frequency = 12)
train <- window(ts_data, end = c(2023, 8))
test <- window(ts_data, start = c(2023, 9))
pacf(data$value, main = "Partial Autocorrelation") # suggests AR(1) or AR(2) will be good
ar_model <- Arima(train, order = c(2,0,0))
ar_forecast <- forecast(ar_model, h = 6)
cos_t <- cos(2 * pi * (1:length(data$value))/12)
xreg_train <- matrix(cos_t[1:length(train)], ncol = 1)
xreg_test  <- matrix(cos_t[(length(train) + 1):length(data$value)], ncol = 1)
# Fit ARMA with cosine regressor
arma_model <- Arima(train, order = c(2,0,3), xreg = xreg_train)
# Forecast using new regressor values
arma_forecast <- forecast(arma_model, h = 6, xreg = xreg_test)
plot(arma_forecast)
sarma_model <- Arima(train, order = c(2,0,3),
seasonal = list(order = c(1,0,1), period = 12))
sarma_forecast <- forecast(sarma_model, h = 6)
plot(sarma_forecast)
# Residuals
res_ar <- residuals(ar_model)
res_arma <- residuals(arma_model)
res_sarma <- residuals(sarma_model)
shapiro.test(res_ar)
shapiro.test(res_arma)
shapiro.test(res_sarma)
ar_model <- Arima(train, order = c(1,0,0))
res_ar <- residuals(ar_model)
shapiro.test(res_ar)
ar_model <- Arima(train, order = c(3,0,0))
shapiro.test(res_ar)
res_ar <- residuals(ar_model)
shapiro.test(res_ar)
ar_model <- Arima(train, order = c(4,0,0))
shapiro.test(res_ar)
ar_model <- Arima(train, order = c(2,0,0))
shapiro.test(res_ar)
res_ar <- residuals(ar_model)
shapiro.test(res_ar)
# Fit ARMA with cosine regressor
arma_model <- Arima(train, order = c(2,0,2), xreg = xreg_train)
res_arma <- residuals(arma_model)
shapiro.test(res_arma)
arma_model <- Arima(train, order = c(3,0,3), xreg = xreg_train)
arma_model <- Arima(train, order = c(3,0,2), xreg = xreg_train)
arma_model <- Arima(train, order = c(3,0,3), xreg = xreg_train)
arma_model <- Arima(train, order = c(2,0,3), xreg = xreg_train)
res_arma <- residuals(arma_model)
shapiro.test(res_arma)
arma_model <- Arima(train, order = c(2,0,4), xreg = xreg_train)
res_arma <- residuals(arma_model)
shapiro.test(res_arma)
train <- window(ts_data, end = c(2023, 8))
lambda <- BoxCox.lambda(train)
sarma_model <- Arima(train, order = c(2,0,3),
seasonal = list(order = c(1,0,1), period = 12), lambda = lambda)
arma_model <- Arima(train, order = c(2,0,3), xreg = xreg_train, lambda=lambda)
res_ar <- residuals(ar_model)
res_arma <- residuals(arma_model)
res_sarma <- residuals(sarma_model)
shapiro.test(res_ar)
shapiro.test(res_arma)
shapiro.test(res_sarma)
ar_model <- Arima(train, order = c(2,0,0), lambda = lambda)
res_ar <- residuals(ar_model)
shapiro.test(res_ar)
shapiro.test(res_ar)
shapiro.test(res_arma)
shapiro.test(res_sarma)
model_comparison <- data.frame(
Model = c("AR", "ARMA", "SARMA"),
AIC = c(AIC(ar_model), AIC(arma_model), AIC(sarma_model)),
BIC = c(BIC(ar_model), BIC(arma_model), BIC(sarma_model))
)
print(model_comparison) # AR has lowest BIC, SARMA has lowest AIC
mean(res_ar)
mean(res_arma)
mean(res_sarma)
model_comparison <- data.frame(
Model = c("AR", "ARMA", "SARMA"),
AIC = c(AIC(ar_model), AIC(arma_model), AIC(sarma_model)),
BIC = c(BIC(ar_model), BIC(arma_model), BIC(sarma_model))
)
print(model_comparison) # AR has lowest BIC, SARMA has lowest AIC
model_comparison <- data.frame(
Model = c("AR", "ARMA", "SARMA"),
AIC = c(AIC(ar_model), AIC(arma_model), AIC(sarma_model)),
BIC = c(BIC(ar_model), BIC(arma_model), BIC(sarma_model))
)
print(model_comparison) # AR has lowest BIC, SARMA has lowest AIC
arma_model <- Arima(train, order = c(2,0,4), xreg = xreg_train, lambda=lambda)
# Compare AIC and BIC
model_comparison <- data.frame(
Model = c("AR", "ARMA", "SARMA"),
AIC = c(AIC(ar_model), AIC(arma_model), AIC(sarma_model)),
BIC = c(BIC(ar_model), BIC(arma_model), BIC(sarma_model))
)
print(model_comparison) # AR has lowest BIC, SARMA has lowest AIC
arma_model <- Arima(train, order = c(3,0,3), xreg = xreg_train, lambda=lambda)
shapiro.test(res_arma)
model_comparison <- data.frame(
Model = c("AR", "ARMA", "SARMA"),
AIC = c(AIC(ar_model), AIC(arma_model), AIC(sarma_model)),
BIC = c(BIC(ar_model), BIC(arma_model), BIC(sarma_model))
)
print(model_comparison) # AR has lowest BIC, SARMA has lowest AIC
arma_model <- Arima(train, order = c(2,0,3), xreg = xreg_train, lambda=lambda)
shapiro.test(res_ar)
shapiro.test(res_arma)
shapiro.test(res_sarma)
mean(res_ar)
mean(res_arma)
mean(res_sarma)
adf.test(res_ar)
adf.test(res_arma)
adf.test(res_sarma)
options(digits=6)
adf.test(res_ar)
adf.test(res_arma)
adf.test(res_sarma)
options(digits=10)
adf.test(res_ar)
adf.test(res_arma)
adf.test(res_sarma)
options(digits=20)
adf.test(res_ar)
adf.test(res_arma)
adf.test(res_sarma)
options(digits=6)
plot(res_ar, type = "p",
main = "Residuals from AR Model",
ylab = "Residuals", xlab = "Time")
abline(h = 0, lty = 2)
plot(res_arma, type = "p",
main = "Residuals from ARMA Model",
ylab = "Residuals", xlab = "Time")
abline(h = 0, lty = 2)
plot(res_sarma, type = "p",
main = "Residuals from SARMA Model",
ylab = "Residuals", xlab = "Time")
abline(h = 0, lty = 2)
plot(res_ar, type = "p",
main = "Residuals from AR Model",
ylab = "Residuals", xlab = "Time")
abline(h = 0, lty = 2)
plot(res_arma, type = "p",
main = "Residuals from ARMA Model",
ylab = "Residuals", xlab = "Time")
abline(h = 0, lty = 2)
adf.test(res_ar)
adf.test(res_ar)
adf.test(res_arma)
adf.test(res_sarma)
x <- adf.test(res_ar)
adf.test(res_ar)
options(digits=10)
adf.test(res_ar)
options(digits=50)
options(digits=20)
adf.test(res_ar)
options(digits=6)
adf.test(res_ar)
acf(res_arma)
acf(res_sarma)
adf.test(res_arma)
adf.test(res_sarma)
shapiro.test(res_ar)
shapiro.test(res_arma)
shapiro.test(res_sarma)
